name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  GAME_EXECUTABLE_NAME: nodieval
  GAME_OSX_APP_NAME: Nodieval

jobs:
  build-macOS:
    runs-on: macOS-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Install rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - name: Remove build script
        run: |
          rm client/build.rs
      - name: Build release
        run: |
          cargo build --release --features native
        working-directory: ./client
      - name: Create release
        run: |
          mkdir -p client/build/macos/src/Game.app/Contents/MacOS/assets
          cp -r client/assets/ client/build/macos/src/Game.app/Contents/MacOS/assets
          cp client/target/release/${{ env.GAME_EXECUTABLE_NAME }} client/build/macos/src/Game.app/Contents/MacOS/
          strip client/build/macos/src/Game.app/Contents/MacOS/${{ env.GAME_EXECUTABLE_NAME }}
          mv client/build/macos/src/Game.app client/build/macos/src/${{ env.GAME_OSX_APP_NAME }}.app
          cd client/build/macos; ./create_icns.sh
          hdiutil create -fs HFS+ -volname "${{ env.GAME_OSX_APP_NAME }}" -srcfolder client/build/macos/src client/${{ env.GAME_EXECUTABLE_NAME }}.dmg
      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.GAME_EXECUTABLE_NAME }}_macos.dmg
          path: client/${{ env.GAME_EXECUTABLE_NAME }}.dmg

  build-linux:
    runs-on: ubuntu-18.04

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Install rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - name: Install Dependencies
        run: sudo apt-get update; sudo apt-get install pkg-config libx11-dev libasound2-dev libudev-dev
      - name: Build release
        run: |
          cargo build --release --features native
        working-directory: ./client
      - name: Prepare release
        run: |
          strip client/target/release/${{ env.GAME_EXECUTABLE_NAME }}
          chmod +x client/target/release/${{ env.GAME_EXECUTABLE_NAME }}
          mv client/target/release/${{ env.GAME_EXECUTABLE_NAME }} client
      - name: Bundle release
        run: |
          tar -C client -czf client/${{ env.GAME_EXECUTABLE_NAME }}_linux.tar.gz ${{ env.GAME_EXECUTABLE_NAME }} assets
      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.GAME_EXECUTABLE_NAME }}_linux.tar.gz
          path: client/${{ env.GAME_EXECUTABLE_NAME }}_linux.tar.gz

  build-windows:
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Install rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - name: Build release
        run: |
          cargo build --release --features native
        working-directory: ./client
      - name: Prepare release
        run: |
          mkdir client/target/release/assets && cp -r client/assets client/target/release/assets
      - name: Zip release
        uses: papeloto/action-zip@v1
        with:
          files: client/target/release/assets/ client/target/release/${{ env.GAME_EXECUTABLE_NAME }}.exe
          dest: client/${{ env.GAME_EXECUTABLE_NAME }}_windows.zip
      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.GAME_EXECUTABLE_NAME }}_windows.zip
          path: client/${{ env.GAME_EXECUTABLE_NAME }}_windows.zip

  build-web:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Install rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - name: Install Dependencies
        run: sudo apt-get update; sudo apt-get install pkg-config libx11-dev libasound2-dev libudev-dev
      - name: Install cargo-make
        run: |
          cargo install cargo-make
      - name: Add wasm target
        run: |
          rustup target add wasm32-unknown-unknown
      - name: Build Release
        run: |
          cargo make release
        working-directory: ./client
      - name: Zip release
        uses: papeloto/action-zip@v1
        with:
          files: client/build/web/
          dest: client/${{ env.GAME_EXECUTABLE_NAME }}_web.zip
      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.GAME_EXECUTABLE_NAME }}_web.zip
          path: client/${{ env.GAME_EXECUTABLE_NAME }}_web.zip
