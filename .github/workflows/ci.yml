name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  GAME_EXECUTABLE_NAME: nodieval
  GAME_OSX_APP_NAME: Nodieval

jobs:
  build-macOS:
    runs-on: macOS-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Install rust toolchain
        uses: actions-rs/toolchain@v1
      - name: Remove build script
        run: |
          rm client/build.rs
      - name: Build release
        run: |
          cargo build --release --features native
        working-directory: ./client
      - name: Prepare dist directory
        run: |
          mkdir client/dist && cp -a client/build/macos/. client/dist
      - name: Prepare icons
        run: |
          mkdir -p client/dist/AppIcon.iconset
          sips -z 16 16   client/dist/icon_1024x1024.png --out client/dist/AppIcon.iconset/icon_16x16.png
          sips -z 32 32   client/dist/icon_1024x1024.png --out client/dist/AppIcon.iconset/icon_16x16@2x.png
          sips -z 32 32   client/dist/icon_1024x1024.png --out client/dist/AppIcon.iconset/icon_32x32.png
          sips -z 64 64   client/dist/icon_1024x1024.png --out client/dist/AppIcon.iconset/icon_32x32@2x.png
          sips -z 128 128 client/dist/icon_1024x1024.png --out client/dist/AppIcon.iconset/icon_128x128.png
          sips -z 256 256 client/dist/icon_1024x1024.png --out client/dist/AppIcon.iconset/icon_128x128@2x.png
          sips -z 256 256 client/dist/icon_1024x1024.png --out client/dist/AppIcon.iconset/icon_256x256.png
          sips -z 512 512 client/dist/icon_1024x1024.png --out client/dist/AppIcon.iconset/icon_256x256@2x.png
          sips -z 512 512 client/dist/icon_1024x1024.png --out client/dist/AppIcon.iconset/icon_512x512.png
          cp client/dist/icon_1024x1024.png client/dist/AppIcon.iconset/icon_512x512@2x.png
          iconutil -c icns client/dist/AppIcon.iconset
          mkdir -p client/dist/src/Game.app/Contents/Resources
          mv client/dist/AppIcon.icns client/dist/src/Game.app/Contents/Resources/
      - name: Create release
        run: |
          mkdir -p client/dist/src/Game.app/Contents/MacOS/assets
          cp -r client/assets/. client/dist/src/Game.app/Contents/MacOS/assets
          cp target/release/${{ env.GAME_EXECUTABLE_NAME }} client/dist/src/Game.app/Contents/MacOS/
          strip client/dist/src/Game.app/Contents/MacOS/${{ env.GAME_EXECUTABLE_NAME }}
          mv client/dist/src/Game.app client/dist/src/${{ env.GAME_OSX_APP_NAME }}.app
          hdiutil create -fs HFS+ -volname "${{ env.GAME_OSX_APP_NAME }}" -srcfolder client/dist/src client/dist/${{ env.GAME_EXECUTABLE_NAME }}.dmg
      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.GAME_EXECUTABLE_NAME }}_macos.dmg
          path: client/dist/${{ env.GAME_EXECUTABLE_NAME }}.dmg

  build-linux:
    runs-on: ubuntu-18.04

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Install rust toolchain
        uses: actions-rs/toolchain@v1
      - name: Install Dependencies
        run: sudo apt-get update; sudo apt-get install pkg-config libx11-dev libasound2-dev libudev-dev
      - name: Build release
        run: |
          cargo build --release --features native
        working-directory: ./client
      - name: Prepare release
        run: |
          mkdir client/dist
          cp target/release/${{ env.GAME_EXECUTABLE_NAME }} client/dist
          cp -r client/assets client/dist/assets
          strip client/dist/${{ env.GAME_EXECUTABLE_NAME }}
          chmod +x client/dist/${{ env.GAME_EXECUTABLE_NAME }}
      - name: Bundle release
        run: |
          tar -C client/dist -czf client/dist/${{ env.GAME_EXECUTABLE_NAME }}_linux.tar.gz ${{ env.GAME_EXECUTABLE_NAME }} assets
      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.GAME_EXECUTABLE_NAME }}_linux.tar.gz
          path: client/dist/${{ env.GAME_EXECUTABLE_NAME }}_linux.tar.gz

  build-windows:
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Install rust toolchain
        uses: actions-rs/toolchain@v1
      - name: Build release
        run: |
          cargo build --release --features native
        working-directory: ./client
      - name: Prepare release
        run: |
          mkdir client/dist
          cp target/release/${{ env.GAME_EXECUTABLE_NAME }}.exe client/dist
          mkdir client/dist/assets && cp -r client/assets client/dist/assets
      - name: Zip release
        uses: papeloto/action-zip@v1
        with:
          files: client/dist/assets client/dist/${{ env.GAME_EXECUTABLE_NAME }}.exe
          dest: client/dist/${{ env.GAME_EXECUTABLE_NAME }}_windows.zip
      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.GAME_EXECUTABLE_NAME }}_windows.zip
          path: client/dist/${{ env.GAME_EXECUTABLE_NAME }}_windows.zip

  build-web:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Install rust toolchain
        uses: actions-rs/toolchain@v1
      - name: Install Dependencies
        run: sudo apt-get update; sudo apt-get install pkg-config libx11-dev libasound2-dev libudev-dev
      - name: Install cargo-make
        run: |
          cargo install cargo-make
      - name: Add wasm target
        run: |
          rustup target add wasm32-unknown-unknown
      - name: Build Release
        run: |
          cargo make release
        working-directory: ./client
      - name: Zip release
        uses: papeloto/action-zip@v1
        with:
          files: client/dist
          dest: client/dist/${{ env.GAME_EXECUTABLE_NAME }}_web.zip
      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.GAME_EXECUTABLE_NAME }}_web.zip
          path: client/dist/${{ env.GAME_EXECUTABLE_NAME }}_web.zip
